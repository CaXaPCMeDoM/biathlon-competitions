// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=mocks/mock.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	entity "biathlon-competitions/internal/entity"
	handlers "biathlon-competitions/internal/utils/handlers"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
	isgomock struct{}
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockEventHandler) Handle(event *entity.Event, comp handlers.Competitor, logger handlers.EventLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", event, comp, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockEventHandlerMockRecorder) Handle(event, comp, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEventHandler)(nil).Handle), event, comp, logger)
}

// MockCompetitor is a mock of Competitor interface.
type MockCompetitor struct {
	ctrl     *gomock.Controller
	recorder *MockCompetitorMockRecorder
	isgomock struct{}
}

// MockCompetitorMockRecorder is the mock recorder for MockCompetitor.
type MockCompetitorMockRecorder struct {
	mock *MockCompetitor
}

// NewMockCompetitor creates a new mock instance.
func NewMockCompetitor(ctrl *gomock.Controller) *MockCompetitor {
	mock := &MockCompetitor{ctrl: ctrl}
	mock.recorder = &MockCompetitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompetitor) EXPECT() *MockCompetitorMockRecorder {
	return m.recorder
}

// AddFiringRangeEnd mocks base method.
func (m *MockCompetitor) AddFiringRangeEnd(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFiringRangeEnd", arg0)
}

// AddFiringRangeEnd indicates an expected call of AddFiringRangeEnd.
func (mr *MockCompetitorMockRecorder) AddFiringRangeEnd(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFiringRangeEnd", reflect.TypeOf((*MockCompetitor)(nil).AddFiringRangeEnd), arg0)
}

// AddFiringRangeStart mocks base method.
func (m *MockCompetitor) AddFiringRangeStart(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFiringRangeStart", arg0)
}

// AddFiringRangeStart indicates an expected call of AddFiringRangeStart.
func (mr *MockCompetitorMockRecorder) AddFiringRangeStart(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFiringRangeStart", reflect.TypeOf((*MockCompetitor)(nil).AddFiringRangeStart), arg0)
}

// AddLapEndTime mocks base method.
func (m *MockCompetitor) AddLapEndTime(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLapEndTime", arg0)
}

// AddLapEndTime indicates an expected call of AddLapEndTime.
func (mr *MockCompetitorMockRecorder) AddLapEndTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLapEndTime", reflect.TypeOf((*MockCompetitor)(nil).AddLapEndTime), arg0)
}

// AddLapStartTime mocks base method.
func (m *MockCompetitor) AddLapStartTime(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLapStartTime", arg0)
}

// AddLapStartTime indicates an expected call of AddLapStartTime.
func (mr *MockCompetitorMockRecorder) AddLapStartTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLapStartTime", reflect.TypeOf((*MockCompetitor)(nil).AddLapStartTime), arg0)
}

// AddPenaltyPeriod mocks base method.
func (m *MockCompetitor) AddPenaltyPeriod(period entity.PenaltyPeriod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPenaltyPeriod", period)
}

// AddPenaltyPeriod indicates an expected call of AddPenaltyPeriod.
func (mr *MockCompetitorMockRecorder) AddPenaltyPeriod(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPenaltyPeriod", reflect.TypeOf((*MockCompetitor)(nil).AddPenaltyPeriod), period)
}

// GetCurrentLap mocks base method.
func (m *MockCompetitor) GetCurrentLap() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentLap")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCurrentLap indicates an expected call of GetCurrentLap.
func (mr *MockCompetitorMockRecorder) GetCurrentLap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentLap", reflect.TypeOf((*MockCompetitor)(nil).GetCurrentLap))
}

// GetID mocks base method.
func (m *MockCompetitor) GetID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockCompetitorMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockCompetitor)(nil).GetID))
}

// GetLapEndTimes mocks base method.
func (m *MockCompetitor) GetLapEndTimes() []time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLapEndTimes")
	ret0, _ := ret[0].([]time.Time)
	return ret0
}

// GetLapEndTimes indicates an expected call of GetLapEndTimes.
func (mr *MockCompetitorMockRecorder) GetLapEndTimes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLapEndTimes", reflect.TypeOf((*MockCompetitor)(nil).GetLapEndTimes))
}

// GetPenaltyPeriods mocks base method.
func (m *MockCompetitor) GetPenaltyPeriods() []entity.PenaltyPeriod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPenaltyPeriods")
	ret0, _ := ret[0].([]entity.PenaltyPeriod)
	return ret0
}

// GetPenaltyPeriods indicates an expected call of GetPenaltyPeriods.
func (mr *MockCompetitorMockRecorder) GetPenaltyPeriods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPenaltyPeriods", reflect.TypeOf((*MockCompetitor)(nil).GetPenaltyPeriods))
}

// HasEventOccurred mocks base method.
func (m *MockCompetitor) HasEventOccurred(eventID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasEventOccurred", eventID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasEventOccurred indicates an expected call of HasEventOccurred.
func (mr *MockCompetitorMockRecorder) HasEventOccurred(eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasEventOccurred", reflect.TypeOf((*MockCompetitor)(nil).HasEventOccurred), eventID)
}

// IncrementCurrentLap mocks base method.
func (m *MockCompetitor) IncrementCurrentLap() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementCurrentLap")
}

// IncrementCurrentLap indicates an expected call of IncrementCurrentLap.
func (mr *MockCompetitorMockRecorder) IncrementCurrentLap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCurrentLap", reflect.TypeOf((*MockCompetitor)(nil).IncrementCurrentLap))
}

// IncrementHits mocks base method.
func (m *MockCompetitor) IncrementHits() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementHits")
}

// IncrementHits indicates an expected call of IncrementHits.
func (mr *MockCompetitorMockRecorder) IncrementHits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementHits", reflect.TypeOf((*MockCompetitor)(nil).IncrementHits))
}

// IsRegistered mocks base method.
func (m *MockCompetitor) IsRegistered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRegistered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRegistered indicates an expected call of IsRegistered.
func (mr *MockCompetitorMockRecorder) IsRegistered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRegistered", reflect.TypeOf((*MockCompetitor)(nil).IsRegistered))
}

// SetActualStart mocks base method.
func (m *MockCompetitor) SetActualStart(arg0 *time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActualStart", arg0)
}

// SetActualStart indicates an expected call of SetActualStart.
func (mr *MockCompetitorMockRecorder) SetActualStart(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActualStart", reflect.TypeOf((*MockCompetitor)(nil).SetActualStart), arg0)
}

// SetCantContinue mocks base method.
func (m *MockCompetitor) SetCantContinue(reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCantContinue", reason)
}

// SetCantContinue indicates an expected call of SetCantContinue.
func (mr *MockCompetitorMockRecorder) SetCantContinue(reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCantContinue", reflect.TypeOf((*MockCompetitor)(nil).SetCantContinue), reason)
}

// SetCurrentLap mocks base method.
func (m *MockCompetitor) SetCurrentLap(lap int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentLap", lap)
}

// SetCurrentLap indicates an expected call of SetCurrentLap.
func (mr *MockCompetitorMockRecorder) SetCurrentLap(lap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentLap", reflect.TypeOf((*MockCompetitor)(nil).SetCurrentLap), lap)
}

// SetEventOccurred mocks base method.
func (m *MockCompetitor) SetEventOccurred(eventID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventOccurred", eventID)
}

// SetEventOccurred indicates an expected call of SetEventOccurred.
func (mr *MockCompetitorMockRecorder) SetEventOccurred(eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventOccurred", reflect.TypeOf((*MockCompetitor)(nil).SetEventOccurred), eventID)
}

// SetFinished mocks base method.
func (m *MockCompetitor) SetFinished(finished bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinished", finished)
}

// SetFinished indicates an expected call of SetFinished.
func (mr *MockCompetitorMockRecorder) SetFinished(finished any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinished", reflect.TypeOf((*MockCompetitor)(nil).SetFinished), finished)
}

// SetNotFinished mocks base method.
func (m *MockCompetitor) SetNotFinished(notFinished bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNotFinished", notFinished)
}

// SetNotFinished indicates an expected call of SetNotFinished.
func (mr *MockCompetitorMockRecorder) SetNotFinished(notFinished any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotFinished", reflect.TypeOf((*MockCompetitor)(nil).SetNotFinished), notFinished)
}

// SetPlannedStart mocks base method.
func (m *MockCompetitor) SetPlannedStart(arg0 *time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPlannedStart", arg0)
}

// SetPlannedStart indicates an expected call of SetPlannedStart.
func (mr *MockCompetitorMockRecorder) SetPlannedStart(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlannedStart", reflect.TypeOf((*MockCompetitor)(nil).SetPlannedStart), arg0)
}

// SetRegistered mocks base method.
func (m *MockCompetitor) SetRegistered(registered bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRegistered", registered)
}

// SetRegistered indicates an expected call of SetRegistered.
func (mr *MockCompetitorMockRecorder) SetRegistered(registered any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegistered", reflect.TypeOf((*MockCompetitor)(nil).SetRegistered), registered)
}

// SetShotsOnTheFiringRange mocks base method.
func (m *MockCompetitor) SetShotsOnTheFiringRange() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShotsOnTheFiringRange")
}

// SetShotsOnTheFiringRange indicates an expected call of SetShotsOnTheFiringRange.
func (mr *MockCompetitorMockRecorder) SetShotsOnTheFiringRange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShotsOnTheFiringRange", reflect.TypeOf((*MockCompetitor)(nil).SetShotsOnTheFiringRange))
}

// UpdatePenaltyPeriod mocks base method.
func (m *MockCompetitor) UpdatePenaltyPeriod(index int, period entity.PenaltyPeriod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePenaltyPeriod", index, period)
}

// UpdatePenaltyPeriod indicates an expected call of UpdatePenaltyPeriod.
func (mr *MockCompetitorMockRecorder) UpdatePenaltyPeriod(index, period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePenaltyPeriod", reflect.TypeOf((*MockCompetitor)(nil).UpdatePenaltyPeriod), index, period)
}

// MockEventLogger is a mock of EventLogger interface.
type MockEventLogger struct {
	ctrl     *gomock.Controller
	recorder *MockEventLoggerMockRecorder
	isgomock struct{}
}

// MockEventLoggerMockRecorder is the mock recorder for MockEventLogger.
type MockEventLoggerMockRecorder struct {
	mock *MockEventLogger
}

// NewMockEventLogger creates a new mock instance.
func NewMockEventLogger(ctrl *gomock.Controller) *MockEventLogger {
	mock := &MockEventLogger{ctrl: ctrl}
	mock.recorder = &MockEventLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventLogger) EXPECT() *MockEventLoggerMockRecorder {
	return m.recorder
}

// LogEvent mocks base method.
func (m *MockEventLogger) LogEvent(event *entity.Event, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogEvent", event, message)
}

// LogEvent indicates an expected call of LogEvent.
func (mr *MockEventLoggerMockRecorder) LogEvent(event, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEvent", reflect.TypeOf((*MockEventLogger)(nil).LogEvent), event, message)
}

// MockLapCompletionChecker is a mock of LapCompletionChecker interface.
type MockLapCompletionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockLapCompletionCheckerMockRecorder
	isgomock struct{}
}

// MockLapCompletionCheckerMockRecorder is the mock recorder for MockLapCompletionChecker.
type MockLapCompletionCheckerMockRecorder struct {
	mock *MockLapCompletionChecker
}

// NewMockLapCompletionChecker creates a new mock instance.
func NewMockLapCompletionChecker(ctrl *gomock.Controller) *MockLapCompletionChecker {
	mock := &MockLapCompletionChecker{ctrl: ctrl}
	mock.recorder = &MockLapCompletionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLapCompletionChecker) EXPECT() *MockLapCompletionCheckerMockRecorder {
	return m.recorder
}

// CheckLapCompletion mocks base method.
func (m *MockLapCompletionChecker) CheckLapCompletion(comp handlers.Competitor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckLapCompletion", comp)
}

// CheckLapCompletion indicates an expected call of CheckLapCompletion.
func (mr *MockLapCompletionCheckerMockRecorder) CheckLapCompletion(comp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLapCompletion", reflect.TypeOf((*MockLapCompletionChecker)(nil).CheckLapCompletion), comp)
}
